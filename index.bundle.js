"use strict";(self.webpackChunkweather_app=self.webpackChunkweather_app||[]).push([[826],{426:(n,e,t)=>{t.d(e,{Z:()=>p});var o=t(537),i=t.n(o),a=t(645),r=t.n(a),c=t(667),s=t.n(c),A=new URL(t(868),t.b),l=r()(i()),d=s()(A);l.push([n.id,"*{\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n    font-family:system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n}\nhtml{\n    background: url("+d+") no-repeat center center fixed; \n    -webkit-background-size: cover;\n    -moz-background-size: cover;\n    -o-background-size: cover;\n    background-size: cover;\n    overflow: hidden;\n}\nmain{\n    padding: 1% 5% 0 5%;\n}\n.heading{\n    color: white;\n    width: max-content;\n    margin: 0 auto 10px auto;\n}\n.top-section{\n    display: flex;\n    color: white;\n    margin-bottom: 15px;\n    justify-content:space-evenly;\n}\n\n.middle-section{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-evenly;\n    text-align: center;\n}\n\n#today-icon{\n    height: 8em;\n    filter: invert(1);\n    margin: 10px 0 10px 0;\n}\n\n.temperatureContainer{\n    display: flex;\n    font-size: 3rem;\n    justify-content: center;\n    margin-bottom: 10px;\n}\n.temperatureContainer img{\n    width: 1em;\n    filter: invert(1);\n}\n#today-description{\n    font-style: italic;\n    margin-bottom: 10px;\n    font-size: 1rem;\n}\n\n#city-input{\n    position: relative;\n    left: 12px;\n    background-color: transparent;\n    border: none;\n    color: white;\n    height: 30px;\n    border-bottom: 1px groove white;\n}\n#city-input::placeholder{\n    color: white;\n    \n}\n#city-input:focus, #city-input:active {\n    background: transparent;\n    outline: none;\n}\ninput:-webkit-autofill,\ninput:-webkit-autofill:hover,\ninput:-webkit-autofill:focus,\ninput:-webkit-autofill:active {\n    transition: background-color 5000s ease-in-out 0s;\n    -webkit-text-fill-color: #fff !important;\n}\n\n#search-button{\n    background-color: transparent;\n    border: none;\n    filter: invert(1);\n    cursor: pointer;\n}\n\n#search-button #searchIcon{\n    height: 17px;\n    font-size: 17px;\n    position: relative;\n    top: 5px;\n    right: 15px;\n    cursor: pointer;\n}\n/* Left and Right section of the today weather section */\n.top-left-section, .top-right-section{\n    display: flex;\n    flex-direction: column;\n    justify-content:space-evenly;\n    /* Weird: pixels wont overflow data on shrink but percentage does?? */\n    width: 150px;\n}\n.top-left-section{\n    text-align: center;\n}\n.topRightItemContainer{\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    width: 80%;\n    align-items: center;\n}\n.leftImageIcon{\n    filter: invert(1);\n    height: 2.5rem;\n}\n.todayInfoLabel{\n    font-size: .3em;\n}\n.dataInfoAndUnit{\n    display: flex;\n    font-size: 2em;\n    align-items: center;\n}\n/* Carousel */\n.forecast-carousel{\n    position: relative;\n    width: 80%;\n    margin: 0 auto;\n    height: 150px;\n}\n\n.carousel-image{\n    height: 100%;\n    width: 100%;\n    /* Very useful for dynamic covering with images */\n    /* object-fit: cover; */\n    filter: invert(1);\n}\n\n.carousel-track-container{\n    position: relative;\n    height: 100%;\n    overflow: hidden;\n}\n\n.carousel-track{\n    list-style: none;\n    position: relative;\n    height: 100%;\n    transition: transform 880ms ease-in;\n}\n.carousel-slide{\n    position: absolute;\n    top: 0;\n    bottom: 0; \n    width: 100%;\n}\n.carousel-button{\n    position: absolute; \n    top: 50%;\n    transform: translateY(-50%);\n    border: 0;\n    background-color: transparent;\n    filter: invert(1);\n    cursor: pointer;\n}\n\n.carousel-button--left{\n    left: -40px;\n}\n\n.carousel-button--right{\n    right: -40px;\n}\n\n.carousel-button img {\n    width: 35px;\n}\n.carousel-nav{\n    display: flex;\n    justify-content: center;\n    padding: 10px 0;\n}\n\n.carousel-indicator{\n    border: 0;\n    border-radius: 50%;\n    width: 12px;\n    height: 12px;\n    background: rgba(255,255,255, .6);\n    margin: 25px 15px 0 15px;\n    cursor: pointer;\n\n}\n\n.carousel-indicator.current-slide{\n    background: rgba(255,255,255, 1);\n}\n\n.isHidden{\n    display: none;\n}\n/* Forecast items inside the carousel */\n.carousel-panel{\n    display: flex;\n    justify-content:space-evenly;\n    align-items: center;\n}\n.forecastContainer{\n    display: flex;\n    flex-direction: column;\n    color: white;\n    text-align: center;\n    height: 150px;\n    justify-content: space-evenly;\n    border: 1px groove white;\n    border-radius: 10%;\n    width: 100px;\n    \n}\n.forecastIcon{\n    height: 40px;\n    filter: invert(1);\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,SAAS;IACT,sBAAsB;IACtB,kJAAkJ;AACtJ;AACA;IACI,iFAAwE;IACxE,8BAA8B;IAC9B,2BAA2B;IAC3B,yBAAyB;IACzB,sBAAsB;IACtB,gBAAgB;AACpB;AACA;IACI,mBAAmB;AACvB;AACA;IACI,YAAY;IACZ,kBAAkB;IAClB,wBAAwB;AAC5B;AACA;IACI,aAAa;IACb,YAAY;IACZ,mBAAmB;IACnB,4BAA4B;AAChC;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,6BAA6B;IAC7B,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,iBAAiB;IACjB,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,eAAe;IACf,uBAAuB;IACvB,mBAAmB;AACvB;AACA;IACI,UAAU;IACV,iBAAiB;AACrB;AACA;IACI,kBAAkB;IAClB,mBAAmB;IACnB,eAAe;AACnB;;AAEA;IACI,kBAAkB;IAClB,UAAU;IACV,6BAA6B;IAC7B,YAAY;IACZ,YAAY;IACZ,YAAY;IACZ,+BAA+B;AACnC;AACA;IACI,YAAY;;AAEhB;AACA;IACI,uBAAuB;IACvB,aAAa;AACjB;AACA;;;;IAII,iDAAiD;IACjD,wCAAwC;AAC5C;;AAEA;IACI,6BAA6B;IAC7B,YAAY;IACZ,iBAAiB;IACjB,eAAe;AACnB;;AAEA;IACI,YAAY;IACZ,eAAe;IACf,kBAAkB;IAClB,QAAQ;IACR,WAAW;IACX,eAAe;AACnB;AACA,wDAAwD;AACxD;IACI,aAAa;IACb,sBAAsB;IACtB,4BAA4B;IAC5B,qEAAqE;IACrE,YAAY;AAChB;AACA;IACI,kBAAkB;AACtB;AACA;IACI,aAAa;IACb,qCAAqC;IACrC,UAAU;IACV,mBAAmB;AACvB;AACA;IACI,iBAAiB;IACjB,cAAc;AAClB;AACA;IACI,eAAe;AACnB;AACA;IACI,aAAa;IACb,cAAc;IACd,mBAAmB;AACvB;AACA,aAAa;AACb;IACI,kBAAkB;IAClB,UAAU;IACV,cAAc;IACd,aAAa;AACjB;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,iDAAiD;IACjD,uBAAuB;IACvB,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,gBAAgB;AACpB;;AAEA;IACI,gBAAgB;IAChB,kBAAkB;IAClB,YAAY;IACZ,mCAAmC;AACvC;AACA;IACI,kBAAkB;IAClB,MAAM;IACN,SAAS;IACT,WAAW;AACf;AACA;IACI,kBAAkB;IAClB,QAAQ;IACR,2BAA2B;IAC3B,SAAS;IACT,6BAA6B;IAC7B,iBAAiB;IACjB,eAAe;AACnB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,WAAW;AACf;AACA;IACI,aAAa;IACb,uBAAuB;IACvB,eAAe;AACnB;;AAEA;IACI,SAAS;IACT,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,iCAAiC;IACjC,wBAAwB;IACxB,eAAe;;AAEnB;;AAEA;IACI,gCAAgC;AACpC;;AAEA;IACI,aAAa;AACjB;AACA,uCAAuC;AACvC;IACI,aAAa;IACb,4BAA4B;IAC5B,mBAAmB;AACvB;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,YAAY;IACZ,kBAAkB;IAClB,aAAa;IACb,6BAA6B;IAC7B,wBAAwB;IACxB,kBAAkB;IAClB,YAAY;;AAEhB;AACA;IACI,YAAY;IACZ,iBAAiB;AACrB",sourcesContent:["*{\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n    font-family:system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n}\nhtml{\n    background: url('./assets/background.jpg') no-repeat center center fixed; \n    -webkit-background-size: cover;\n    -moz-background-size: cover;\n    -o-background-size: cover;\n    background-size: cover;\n    overflow: hidden;\n}\nmain{\n    padding: 1% 5% 0 5%;\n}\n.heading{\n    color: white;\n    width: max-content;\n    margin: 0 auto 10px auto;\n}\n.top-section{\n    display: flex;\n    color: white;\n    margin-bottom: 15px;\n    justify-content:space-evenly;\n}\n\n.middle-section{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-evenly;\n    text-align: center;\n}\n\n#today-icon{\n    height: 8em;\n    filter: invert(1);\n    margin: 10px 0 10px 0;\n}\n\n.temperatureContainer{\n    display: flex;\n    font-size: 3rem;\n    justify-content: center;\n    margin-bottom: 10px;\n}\n.temperatureContainer img{\n    width: 1em;\n    filter: invert(1);\n}\n#today-description{\n    font-style: italic;\n    margin-bottom: 10px;\n    font-size: 1rem;\n}\n\n#city-input{\n    position: relative;\n    left: 12px;\n    background-color: transparent;\n    border: none;\n    color: white;\n    height: 30px;\n    border-bottom: 1px groove white;\n}\n#city-input::placeholder{\n    color: white;\n    \n}\n#city-input:focus, #city-input:active {\n    background: transparent;\n    outline: none;\n}\ninput:-webkit-autofill,\ninput:-webkit-autofill:hover,\ninput:-webkit-autofill:focus,\ninput:-webkit-autofill:active {\n    transition: background-color 5000s ease-in-out 0s;\n    -webkit-text-fill-color: #fff !important;\n}\n\n#search-button{\n    background-color: transparent;\n    border: none;\n    filter: invert(1);\n    cursor: pointer;\n}\n\n#search-button #searchIcon{\n    height: 17px;\n    font-size: 17px;\n    position: relative;\n    top: 5px;\n    right: 15px;\n    cursor: pointer;\n}\n/* Left and Right section of the today weather section */\n.top-left-section, .top-right-section{\n    display: flex;\n    flex-direction: column;\n    justify-content:space-evenly;\n    /* Weird: pixels wont overflow data on shrink but percentage does?? */\n    width: 150px;\n}\n.top-left-section{\n    text-align: center;\n}\n.topRightItemContainer{\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    width: 80%;\n    align-items: center;\n}\n.leftImageIcon{\n    filter: invert(1);\n    height: 2.5rem;\n}\n.todayInfoLabel{\n    font-size: .3em;\n}\n.dataInfoAndUnit{\n    display: flex;\n    font-size: 2em;\n    align-items: center;\n}\n/* Carousel */\n.forecast-carousel{\n    position: relative;\n    width: 80%;\n    margin: 0 auto;\n    height: 150px;\n}\n\n.carousel-image{\n    height: 100%;\n    width: 100%;\n    /* Very useful for dynamic covering with images */\n    /* object-fit: cover; */\n    filter: invert(1);\n}\n\n.carousel-track-container{\n    position: relative;\n    height: 100%;\n    overflow: hidden;\n}\n\n.carousel-track{\n    list-style: none;\n    position: relative;\n    height: 100%;\n    transition: transform 880ms ease-in;\n}\n.carousel-slide{\n    position: absolute;\n    top: 0;\n    bottom: 0; \n    width: 100%;\n}\n.carousel-button{\n    position: absolute; \n    top: 50%;\n    transform: translateY(-50%);\n    border: 0;\n    background-color: transparent;\n    filter: invert(1);\n    cursor: pointer;\n}\n\n.carousel-button--left{\n    left: -40px;\n}\n\n.carousel-button--right{\n    right: -40px;\n}\n\n.carousel-button img {\n    width: 35px;\n}\n.carousel-nav{\n    display: flex;\n    justify-content: center;\n    padding: 10px 0;\n}\n\n.carousel-indicator{\n    border: 0;\n    border-radius: 50%;\n    width: 12px;\n    height: 12px;\n    background: rgba(255,255,255, .6);\n    margin: 25px 15px 0 15px;\n    cursor: pointer;\n\n}\n\n.carousel-indicator.current-slide{\n    background: rgba(255,255,255, 1);\n}\n\n.isHidden{\n    display: none;\n}\n/* Forecast items inside the carousel */\n.carousel-panel{\n    display: flex;\n    justify-content:space-evenly;\n    align-items: center;\n}\n.forecastContainer{\n    display: flex;\n    flex-direction: column;\n    color: white;\n    text-align: center;\n    height: 150px;\n    justify-content: space-evenly;\n    border: 1px groove white;\n    border-radius: 10%;\n    width: 100px;\n    \n}\n.forecastIcon{\n    height: 40px;\n    filter: invert(1);\n}"],sourceRoot:""}]);const p=l},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,i,a){"string"==typeof n&&(n=[[null,n,void 0]]);var r={};if(o)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(r[s]=!0)}for(var A=0;A<n.length;A++){var l=[].concat(n[A]);o&&r[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),i&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=i):l[4]="".concat(i)),e.push(l))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(i," */"),r=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(r).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},r=[],c=0;c<n.length;c++){var s=n[c],A=o.base?s[0]+o.base:s[0],l=a[A]||0,d="".concat(A," ").concat(l);a[A]=l+1;var p=t(d),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var m=i(u,o);o.byIndex=c,e.splice(c,0,{identifier:d,updater:m,references:1})}r.push(d)}return r}function i(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,i){var a=o(n=n||[],i=i||{});return function(n){n=n||[];for(var r=0;r<a.length;r++){var c=t(a[r]);e[c].references--}for(var s=o(n,i),A=0;A<a.length;A++){var l=t(a[A]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=s}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,i&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},690:(n,e,t)=>{var o=t(379),i=t.n(o),a=t(795),r=t.n(a),c=t(569),s=t.n(c),A=t(565),l=t.n(A),d=t(216),p=t.n(d),u=t(589),m=t.n(u),f=t(426),g={};g.styleTagTransform=m(),g.setAttributes=l(),g.insert=s().bind(null,"head"),g.domAPI=r(),g.insertStyleElement=p(),i()(f.Z,g),f.Z&&f.Z.locals&&f.Z.locals;class I{constructor(n,e,t,o,i,a){this.id=n,this.temp=e,this.description=t,this.time=o,this.lat=i,this.lon=a}}async function h(n,e){const t={id:"",mainWeather:"",city:"",temp:"",description:"",humidity:"",windSpeed:"",feelsLike:"",lat:"",lon:"",unit:"",currentTime:"u"};let o=e;""!==o&&void 0!==o||(o="imperial"),t.unit=o;const i=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${n}&units=${o}&appid=fd553c93063c3987982ce1a5cc2cc71b`,{mode:"cors"}),a=await i.json();t.id=a.weather[0].id,t.mainWeather=a.weather[0].main,t.city=a.name,t.temp=Math.round(a.main.temp),t.description=a.weather[0].description,t.humidity=Math.round(a.main.humidity),t.windSpeed=Math.round(a.wind.speed),t.feelsLike=Math.round(a.main.feels_like),t.lat=a.coord.lat,t.lon=a.coord.lon;const r=await async function(n,e){const t=await fetch(`https://maps.googleapis.com/maps/api/timezone/json?location=${n},${e}&timestamp=1331161200&key=AIzaSyAFIYFe32hp97dIG58SXLczpBUqC8fC95U`,{mode:"cors"}),o=await t.json();return(new Date).toLocaleString("en-US",{timeZone:o.timeZoneId})}(t.lat,t.lon);return t.currentTime=r,t}async function C(n,e){let t=e;""!==t&&void 0!==t||(t="imperial");const o=await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${n}&units=${t}&appid=6afefd0acc02015759340d80dc5686e2`,{mode:"cors"});return function(n){const e=[];for(let t=0;t<12;t++){const o=n.list[t].weather[0].id,{temp:i}=n.list[t].main,{description:a}=n.list[t].weather[0],r=n.list[t].dt_txt,{lat:c}=n.city.coord,{lon:s}=n.city.coord;e.push(new I(o,i,a,r,c,s))}return e}(await o.json())}const B=new class{constructor(){this.todayForecastData="",this.hourlyForecastData="",this.currentLocation={lat:"",lon:"",cityName:""}}};const y=t.p+"f7a26ab2c1e6ae877b07.svg",b=t.p+"8a32d8244db591d495ec.svg",v=t.p+"5859cec808a3d8088316.svg",w=t.p+"8e9022759696112b3266.svg",x=t.p+"a42f7cbb0c7206e0afb9.svg",k=t.p+"323e01d78c0e9514d477.svg",E=t.p+"d8cb2cb6bafc9a2e5e5f.svg",L=t.p+"10782b4ed6e9f8982082.svg",j=t.p+"a3e175f6a11e2fa58ab3.svg",Y=t.p+"90819756e2a8278a8294.svg",S=t.p+"c786c38b16caa6b3645e.svg",M=t.p+"3616f5449ed2b52a3f25.svg",T=t.p+"4cf17c1e0945eb643e43.svg",z=t.p+"3a16b528a352d30ff551.svg",U=t.p+"d9ea8571f7b7e6e70b93.svg",H=t.p+"5236d269f663461a4917.svg",W=t.p+"1ec4a13c4eb0350ba260.svg",Z=t.p+"5ff8ec961a4797824d38.svg",F=t.p+"89dc9f688f7a9b62b07b.svg",D=t.p+"d186b07d970d6209f6eb.svg";function R(n){const e=Number(n);return e>=200&&e<=232?b:e>=300&&e<=321?E:500===e?w:501===e?x:e>=503&&e<=531?k:600===e||601===e?L:615===e||616===e?j:e>=600&&e<=622?Y:711===e?S:721===e?M:741===e?T:781===e?z:e>=701&&e<=781?U:801===e?H:802===e?W:803===e?Z:804===e?F:800===e?v:D}function N(n){const e=n.split(" ");let t="";for(let n=0;n<e.length;n++)t+=e[n][0].toUpperCase(),t+=e[n].substr(1),t+=" ";return t}function $(n){const e=document.createElement("div");e.classList.add("forecastContainer");const t=document.createElement("img");t.classList.add("forecastIcon"),t.src=R(n.id,n.lat,n.lon);const o=document.createElement("h5");o.innerHTML=n.temp;const i=document.createElement("h5");i.innerHTML=N(n.description),i.style.fontStyle="italic";const a={time:(c=n.time).substr(10),date:function(n){const e=String(n),t=e.slice(0,4);return`${e.slice(6,7)}/${e.slice(8,10)}/${t}`}(c.slice(0,10))},r=document.createElement("h5");var c;r.innerHTML=a.time;const s=document.createElement("h5");return s.innerHTML=a.date,e.append(t),e.append(o),e.append(i),e.append(r),e.append(s),e}function q(n){!function(){const n=document.getElementById("carousel-panel-one"),e=document.getElementById("carousel-panel-two"),t=document.getElementById("carousel-panel-three");n.innerHTML="",e.innerHTML="",t.innerHTML=""}(),n.forEach(((n,e)=>{e<4?document.getElementById("carousel-panel-one").append($(n)):e>=4&&e<8?document.getElementById("carousel-panel-two").append($(n)):document.getElementById("carousel-panel-three").append($(n))}))}const _=t.p+"4a1df6c5e3f1cc9850b9.svg",V=t.p+"39170e9f1ef72e30e8af.svg",O=t.p+"e40d8fc69097de188bea.svg",X=t.p+"5907848e08ee1a3d4273.svg",J=t.p+"0770d444f097fa687156.svg",Q=t.p+"2d76aaee46d4e33a801c.svg",P=t.p+"5e15a8793b1b80423f8e.svg",G=t.p+"1c7aa443ddb9d5f97854.svg",K=t.p+"61f16dd37fa2089408b1.svg";function nn(n,e,t,o){const i=document.createElement("div");i.classList.add("topRightItemContainer");const a=new Image;a.src=n,a.classList.add("leftImageIcon");const r=document.createElement("div");if(""!==e){const n=document.createElement("p");n.classList.add("todayInfoLabel"),n.innerHTML=e,r.append(n)}const c=document.createElement("div");c.classList.add("dataInfoAndUnit");const s=document.createElement("h5");if(s.innerHTML=t,c.append(s),""!==o){const n=document.createElement("div");n.style.filter="invert(1)";const e=new Image;e.src=o,n.append(e),c.append(n)}return r.append(c),i.append(a),i.append(r),i}function en(n){!function(){const n=document.getElementById("searchIcon");let e=new Image;e=y,n.src=e,n.alt="Image of search icon"}(),function(){const n=document.getElementById("today-icon"),e=document.getElementById("today-temp"),t=document.getElementById("unit"),o=document.getElementById("today-description"),i=document.getElementById("today-feels-like"),a=document.getElementById("today-wind-speed"),r=document.getElementById("today-humidity"),c=document.getElementById("city"),s=document.getElementById("lat-lon"),A=document.getElementById("current-time"),l=[];l.push(n),l.push(e),l.push(t),l.push(o),l.push(i),l.push(i),l.push(a),l.push(r),l.push(c),l.push(s),l.push(A),l.forEach((n=>{n.innerHTML=""}))}(),function(n){const e=document.getElementById("city"),t=document.getElementById("lat-lon"),o=document.getElementById("current-time");e.append(function(n){const e=document.createElement("div"),t=new Image;t.src=O,t.alt="Icon representing a city",t.classList.add("leftImageIcon"),e.append(t);const o=document.createElement("h5");return o.innerHTML=n,e.append(o),e}(n.city)),t.append(function(n,e){const t=document.createElement("div");t.classList.add("todayWeatherItemContainer");const o=new Image;o.src=X,o.alt="Icon representing a drop location",o.classList.add("leftImageIcon"),t.append(o);const i=document.createElement("h5");return i.innerHTML=`${n}, ${e}`,t.append(i),t}(n.lat,n.lon)),o.append(function(n){const e={date:(t=n).slice(0,9),time:t.slice(11,22)};var t;const o=document.createElement("div"),i=new Image;i.src=K,i.alt="Icon representing a city",i.classList.add("leftImageIcon");const a=document.createElement("div"),r=document.createElement("h5");r.innerHTML=e.time;const c=document.createElement("h5");return c.innerHTML=e.date,a.append(r),a.append(c),o.append(i),o.append(a),o}(n.currentTime))}(n),function(n){const e=document.getElementById("today-feels-like"),t=document.getElementById("today-wind-speed"),o=document.getElementById("today-humidity");e.append(nn(J,"Feels Like",n.feelsLike,_)),t.append(nn(Q,"Wind Speed",n.windSpeed,P)),o.append(nn(G,"Humidity",n.humidity,""))}(n),function(n){const e=document.getElementById("today-icon"),t=document.getElementById("today-temp"),o=document.getElementById("unit"),i=document.getElementById("today-description");e.src=R(n.id,n.lat,n.lon),t.innerHTML=n.temp,"imperial"===n.unit?o.src=_:o.src=V,i.innerHTML=N(n.description)}(n)}async function tn(){try{const n=await async function(){const n=await new Promise(((n,e)=>{navigator.geolocation.getCurrentPosition(n,e)})),e=n.coords.latitude,t=n.coords.longitude;return B.currentLocation.lat=e,B.currentLocation.lon=t,{lat:e,lon:t}}(),e=await async function(n,e){const t=await fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${n},${e}&key=AIzaSyAFIYFe32hp97dIG58SXLczpBUqC8fC95U`,{mode:"cors"});return(await t.json()).results[0].address_components[3].long_name}(n.lat,n.lon);B.currentLocation.cityName=e}catch{alert("Location services denied...loading default city.")}let n,e;if(""!==B.currentLocation.cityName)n=await h(B.currentLocation.cityName),e=await C(B.currentLocation.cityName);else{const t="New York";n=await h(t),e=await C(t)}B.hourlyForecastData=e,B.todayForecastData=n,en(n),q(e)}window.onload=()=>{tn()},document.getElementById("search-button").addEventListener("click",(async function(){const n=document.getElementById("city-input").value;let e,t;try{e=await h(n),t=await C(n)}catch{alert("Error searching for city, please retry.")}B.hourlyForecastData=t,B.todayForecastData=e,en(e),q(t)}))},868:(n,e,t)=>{n.exports=t.p+"a7abdbc241892bff0227.jpg"}},n=>{n(n.s=690)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,